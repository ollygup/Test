[04/05/2025 16:54:55] GET https://localhost:32772/swagger/index.html
Request Body:

Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

[04/05/2025 16:54:55] GET https://localhost:32772/swagger/index.html
Request Body:

Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

[04/05/2025 16:54:55] GET https://localhost:32772/swagger/v1/swagger.json
Request Body:

Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "required": [
          "partnerKey",
          "partnerPassword",
          "partnerRefNo",
          "sig",
          "timestamp",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "partnerKey": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerRefNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerPassword": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "totalAmount": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string"
          },
          "sig": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
[04/05/2025 16:54:56] GET https://localhost:32772/swagger/v1/swagger.json
Request Body:

Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "required": [
          "partnerKey",
          "partnerPassword",
          "partnerRefNo",
          "sig",
          "timestamp",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "partnerKey": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerRefNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerPassword": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "totalAmount": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string"
          },
          "sig": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
[04/05/2025 16:55:01] POST https://localhost:32772/Transaction
Request Body:
{
  "partnerKey": "string",
  "partnerRefNo": "string",
  "partnerPassword": "string",
  "totalAmount": 1,
  "items": [
    {
      "partnerItemRef": "string",
      "name": "string",
      "qty": 5,
      "unitPrice": 1
    }
  ],
  "timestamp": "string",
  "sig": "string"
}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-3c7c54fc50a6bd3fb80960e02aabff35-9eb8874f2173968e-00","errors":{"$":["The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0."],"input":["The input field is required."]}}
[04/05/2025 16:55:04] POST https://localhost:32772/Transaction
Request Body:
{
  "partnerKey": "string",
  "partnerRefNo": "string",
  "partnerPassword": "string",
  "totalAmount": 1,
  "items": [
    {
      "partnerItemRef": "string",
      "name": "string",
      "qty": 5,
      "unitPrice": 1
    }
  ],
  "timestamp": "string",
  "sig": "string"
}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-0b2d5758586fb5d36a8e67d0f9dd9a81-32a858fe71ae8140-00","errors":{"$":["The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0."],"input":["The input field is required."]}}
API Name: /swagger/index.html
Time Called: 2025-04-05 17:06:47
Request Method: GET
Request URL: https://localhost:32772/swagger/index.html
Request Body:

Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-05 17:06:47
Request Method: GET
Request URL: https://localhost:32772/swagger/v1/swagger.json
Request Body:

Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "required": [
          "partnerKey",
          "partnerPassword",
          "partnerRefNo",
          "sig",
          "timestamp",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "partnerKey": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerRefNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerPassword": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "totalAmount": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string"
          },
          "sig": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-05 17:06:51
Request Method: POST
Request URL: https://localhost:32772/Transaction
Request Body:
{
  "partnerKey": "string",
  "partnerRefNo": "string",
  "partnerPassword": "string",
  "totalAmount": 1,
  "items": [
    {
      "partnerItemRef": "string",
      "name": "string",
      "qty": 5,
      "unitPrice": 1
    }
  ],
  "timestamp": "string",
  "sig": "string"
}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Access Denied!"}
API Name: /swagger/index.html
Time Called: 2025-04-05 17:22:51
Request Method: GET
Request URL: https://localhost:32772/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-05 17:22:52
Request Method: GET
Request URL: https://localhost:32772/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "required": [
          "partnerKey",
          "partnerPassword",
          "partnerRefNo",
          "sig",
          "timestamp",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "partnerKey": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerRefNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerPassword": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "totalAmount": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string"
          },
          "sig": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-05 17:23:02
Request Method: POST
Request URL: https://localhost:32772/Transaction
Request Body: Invalid or non-JSON content
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Access Denied!"}
API Name: /swagger/index.html
Time Called: 2025-04-06 02:54:57
Request Method: GET
Request URL: https://localhost:32768/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-06 02:54:58
Request Method: GET
Request URL: https://localhost:32768/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "required": [
          "partnerKey",
          "partnerPassword",
          "partnerRefNo",
          "sig",
          "timestamp",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "partnerKey": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerRefNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partnerPassword": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "totalAmount": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string"
          },
          "sig": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-06 02:57:03
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"\u003CENCRYPTED\u003E","totalAmount":1,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Access Denied!"}
API Name: /Transaction
Time Called: 2025-04-06 03:19:41
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"\u003CENCRYPTED\u003E","totalAmount":-1,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-43caf16f3b17da8fbcc867ea576a8199-06b2a43fbcaa7af5-00","errors":{"TotalAmount":["TotalAmount must be a positive value."]}}
API Name: /Transaction
Time Called: 2025-04-06 03:21:03
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"\u003CENCRYPTED\u003E","totalAmount":-1,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-8f6495b7a148e13708128c34802a7587-7b2cf1815083c58c-00","errors":{"TotalAmount":["TotalAmount must be a positive value."]}}
API Name: /Transaction
Time Called: 2025-04-06 03:24:17
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"\u003CENCRYPTED\u003E","totalAmount":-1,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-9f95365c467078791063c0ec0866cae6-ed755c3feb36444e-00","errors":{"TotalAmount":["TotalAmount must be a positive value."]}}
API Name: /Transaction
Time Called: 2025-04-06 03:24:18
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"\u003CENCRYPTED\u003E","totalAmount":-1,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-ae4a96a2f53fe1e0169cccdbdfe4bf91-518df177f10c1d22-00","errors":{"TotalAmount":["TotalAmount must be a positive value."]}}
API Name: /swagger/index.html
Time Called: 2025-04-06 03:59:42
Request Method: GET
Request URL: https://localhost:32768/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-06 03:59:42
Request Method: GET
Request URL: https://localhost:32768/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "type": "object",
        "properties": {
          "partnerKey": {
            "type": "string",
            "nullable": true
          },
          "partnerRefNo": {
            "type": "string",
            "nullable": true
          },
          "partnerPassword": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "sig": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-06 03:59:56
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":-1,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"TotalAmount must be a positive value."}
API Name: /swagger/index.html
Time Called: 2025-04-06 04:02:09
Request Method: GET
Request URL: https://localhost:32768/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-06 04:02:09
Request Method: GET
Request URL: https://localhost:32768/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "type": "object",
        "properties": {
          "partnerKey": {
            "type": "string",
            "nullable": true
          },
          "partnerRefNo": {
            "type": "string",
            "nullable": true
          },
          "partnerPassword": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "sig": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-06 04:02:19
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":null,"partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":0,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-4101dc48468877d89729588489309287-9dae918113f30362-00","errors":{"PartnerKey":["The PartnerKey field is required."]}}
API Name: /Transaction
Time Called: 2025-04-06 04:02:59
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":0,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"PartnerKey is required."}
API Name: /Transaction
Time Called: 2025-04-06 04:11:27
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"test","partnerRefNo":"","partnerPassword":"ENCRYPTED","totalAmount":0,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"PartnerRefNo is required."}
API Name: /Transaction
Time Called: 2025-04-06 04:11:33
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"test","partnerRefNo":"test","partnerPassword":"ENCRYPTED","totalAmount":0,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"PartnerPassword is required."}
API Name: /swagger/index.html
Time Called: 2025-04-06 04:31:34
Request Method: GET
Request URL: https://localhost:32768/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-06 04:31:34
Request Method: GET
Request URL: https://localhost:32768/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "required": [
          "name",
          "partnerItemRef",
          "qty",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "qty": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "type": "object",
        "properties": {
          "partnerKey": {
            "type": "string",
            "nullable": true
          },
          "partnerRefNo": {
            "type": "string",
            "nullable": true
          },
          "partnerPassword": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "sig": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-06 04:31:45
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":1000,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Invalid Total Amount."}
API Name: /Transaction
Time Called: 2025-04-06 04:31:53
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":5,"items":[{"partnerItemRef":"string","name":"string","qty":5,"unitPrice":1}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Access Denied!"}
API Name: /swagger/index.html
Time Called: 2025-04-06 05:08:36
Request Method: GET
Request URL: https://localhost:32768/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-06 05:08:37
Request Method: GET
Request URL: https://localhost:32768/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "qty": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "type": "object",
        "properties": {
          "partnerKey": {
            "type": "string",
            "nullable": true
          },
          "partnerRefNo": {
            "type": "string",
            "nullable": true
          },
          "partnerPassword": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "sig": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
API Name: /Transaction
Time Called: 2025-04-06 05:10:53
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":1000,"items":[{"partnerItemRef":"string","name":"string","qty":0,"unitPrice":0}],"timestamp":"string","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Timestamp must be in ISO 8601 format (yyyy-MM-ddTHH:mm:ss.sssZ)."}
API Name: /Transaction
Time Called: 2025-04-06 05:11:31
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":1000,"items":[{"partnerItemRef":"string","name":"string","qty":0,"unitPrice":0}],"timestamp":"2024-08-15T02:11:22.0000000Z","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Quantity must be between 1 and 5."}
API Name: /Transaction
Time Called: 2025-04-06 05:11:40
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":1000,"items":[{"partnerItemRef":"string","name":"string","qty":1,"unitPrice":1}],"timestamp":"2024-08-15T02:11:22.0000000Z","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Invalid Total Amount."}
API Name: /Transaction
Time Called: 2025-04-06 05:11:47
Request Method: POST
Request URL: https://localhost:32768/Transaction
Request Body:
{"partnerKey":"string","partnerRefNo":"string","partnerPassword":"ENCRYPTED","totalAmount":1000,"items":[{"partnerItemRef":"string","name":"string","qty":1,"unitPrice":1000}],"timestamp":"2024-08-15T02:11:22.0000000Z","sig":"string"}
Response Body:
{"totalAmount":null,"totalDiscount":null,"finalAmount":null,"result":0,"resultMessage":"Access Denied!"}
API Name: /swagger/index.html
Time Called: 2025-04-06 07:04:35
Request Method: GET
Request URL: https://localhost:32770/swagger/index.html
Request Body: Empty
Response Body:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Test.Api v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

API Name: /swagger/v1/swagger.json
Time Called: 2025-04-06 07:04:36
Request Method: GET
Request URL: https://localhost:32770/swagger/v1/swagger.json
Request Body: Empty
Response Body:
{
  "openapi": "3.0.1",
  "info": {
    "title": "Test.Api",
    "version": "1.0"
  },
  "paths": {
    "/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "operationId": "Transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionOutputDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemDTO": {
        "type": "object",
        "properties": {
          "partnerItemRef": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "qty": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "type": "object",
        "properties": {
          "partnerKey": {
            "type": "string",
            "nullable": true
          },
          "partnerRefNo": {
            "type": "string",
            "nullable": true
          },
          "partnerPassword": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDTO"
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "sig": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "resultMessage": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalDiscount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "finalAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
